definitions:
  steps:
    - step: &syntax-check
        name: syntax-check
        image: atlassian/default-image:2
        caches:
          - docker
        services:
          - docker
        script:
          - DEBIAN_FRONTEND=noninteractive apt-get -qq -y && apt-get install -qq -y xmlstarlet
          - sh -c "$(curl -fsSL --output - https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          - |
            curl -fsSL --output /var/tmp/shellcheck-stable.txz "https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.$(uname -s | tr A-Z a-z).$(uname -m).tar.xz" | \
            tar -xJf /var/tmp/shellcheck-stable.txz -C /usr/local
            chmod 755 /usr/local/shellcheck-stable/shellcheck
            ln -s /usr/local/shellcheck-stable/shellcheck /usr/local/bin/shellcheck
            rm -f /var/tmp/shellcheck-stable.txz
          - task syntax-check
        artifacts:
          - 'test-reports/**'
    - step: &lint
        name: lint
        image: atlassian/default-image:2
        caches:
          - docker
        services:
          - docker
        script:
          - DEBIAN_FRONTEND=noninteractive apt-get -qq -y && apt-get install -qq -y xmlstarlet
          - sh -c "$(curl -fsSL --output - https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          - |
            HADOLINT=1.19.0
            curl -fsSL --output /usr/local/bin/hadolint "https://github.com/hadolint/hadolint/releases/download/v${HADOLINT}/hadolint-$(uname -s | tr A-Z a-z)-$(uname -m)"
            chmod 755 /usr/local/bin/hadolint
          - task lint
        artifacts:
          - 'test-reports/**'
    - step: &build-image
        name: build-image
        image: atlassian/default-image:2
        caches:
          - docker
        services:
          - docker
        script:
          - DEBIAN_FRONTEND=noninteractive apt-get -qq -y && apt-get install -qq -y xmlstarlet
          - sh -c "$(curl -fsSL --output - https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          - task build-image
        artifacts:
          - 'test-reports/**'
    - step: &scan-image
        name: scan-image
        image: atlassian/default-image:2
        caches:
          - docker
        services:
          - docker
        script:
          - DEBIAN_FRONTEND=noninteractive apt-get -qq -y && apt-get install -qq -y xmlstarlet
          - sh -c "$(curl -fsSL --output - https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          - |
            TRIVY=0.14.0
            curl -fsSL --output /var/tmp/trivy.tgz https://github.com/aquasecurity/trivy/releases/download/v${TRIVY}/trivy_${TRIVY}_Linux-64bit.tar.gz
            tar -xzf /var/tmp/trivy.tgz -C /usr/local/bin
            chmod 755 /usr/local/bin/trivy
            rm -f /var/tmp/trivy.tgz
          - task scan-image
        artifacts:
          - 'test-reports/**'
    - step: &test
        name: test
        image: atlassian/default-image:2
        caches:
          - docker
        services:
          - docker
        script:
          - DEBIAN_FRONTEND=noninteractive apt-get -qq -y && apt-get install -qq -y xmlstarlet
          - sh -c "$(curl -fsSL --output - https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          - sh -c "$(curl -fsSL --output - https://git.io/shellspec)" -- -b /usr/local/bin --yes
          - task test
        artifacts:
          - 'test-reports/**'
    - step: &publish-image
        name: publish-image
        deployment: test
        image: atlassian/default-image:2
        caches:
          - docker
        services:
          - docker
        script:
          - DEBIAN_FRONTEND=noninteractive apt-get -qq -y && apt-get install -qq -y xmlstarlet
          - sh -c "$(curl -fsSL --output - https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
          - task publish-image
        artifacts:
          - 'test-reports/**'

pipelines:
  tags:
    '**':
      - step: *syntax-check
      - step: *lint
      - step: *build-image
      - step: *scan-image
      - step: *test
      - step: *publish-image

  pull-requests:
    '**':
      - step: *syntax-check
      - step: *lint
      - step: *build-image
      - step: *scan-image
      - step: *test

  custom:
    renovate:
      - step:
          name: renovate
          image: renovate/renovate
          script:
            - git config --global user.email 'yujiorama+renovate-bot@gmail.com'
            - git config --global user.name 'Renovate Bot'
            - >
              renovate
              --platform bitbucket
              --username yujiorama
              --password $RENOVATE_PASSWORD
              --git-author "$(git config user.email)"
              --onboarding true
              --onboarding-config '{"extends":["config:base"]}'
              $BITBUCKET_REPO_FULL_NAME
